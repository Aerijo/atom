jobs:
  - job: Linux
    dependsOn: GetReleaseVersion
    timeoutInMinutes: 180
    variables:
      ReleaseVersion: $[ dependencies.GetReleaseVersion.outputs['Version.ReleaseVersion'] ]
    pool:
      # This image is used to host the Docker container that runs the build
      vmImage: ubuntu-16.04

    steps:
      - template: templates/preparation.yml

      - template: templates/cache.yml
        parameters:
          OS: linux

      - template: templates/bootstrap.yml

      - script: script/lint
        displayName: Run linter

      - script: script/build --no-bootstrap --create-debian-package --create-rpm-package --compress-artifacts
        env:
          GITHUB_TOKEN: $(GITHUB_TOKEN)
          ATOM_RELEASE_VERSION: $(ReleaseVersion)
          CC: clang
          CXX: clang++
          npm_config_clang: 1
        displayName: Build Atom

      - script: |
          sudo chown root ./out/atom*-amd64/chrome-sandbox
          sudo chmod 4755 ./out/atom*-amd64/chrome-sandbox
        displayName: Tweaking chrome-sandbox binary

      - script: script/test
        env:
          CI: true
          CI_PROVIDER: VSTS
          ATOM_JASMINE_REPORTER: list
          TEST_JUNIT_XML_ROOT: $(Common.TestResultsDirectory)/junit
          DISPLAY: :99.0
        displayName: Run tests
        condition: and(succeeded(), ne(variables['Atom.SkipTests'], 'true'))

      - script: script/postprocess-junit-results --search-folder "${TEST_JUNIT_XML_ROOT}" --test-results-files "**/*.xml"
        env:
          TEST_JUNIT_XML_ROOT: $(Common.TestResultsDirectory)/junit
        displayName: Post-process test results
        condition: ne(variables['Atom.SkipTests'], 'true')

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: JUnit
          searchFolder: $(Common.TestResultsDirectory)/junit
          testResultsFiles: '**/*.xml'
          mergeTestResults: true
          testRunTitle: Linux
        condition: ne(variables['Atom.SkipTests'], 'true')

      - template: templates/publish.yml
        parameters:
          artifacts:
            - filename: atom.x86_64.rpm
              dir: $(Build.SourcesDirectory)/out
              condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
            - filename: atom-amd64.deb
              dir: $(Build.SourcesDirectory)/out
              condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
            - filename: atom-amd64.tar.gz
              dir: $(Build.SourcesDirectory)/out
              condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
