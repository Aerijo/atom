jobs:
  - job: Windows
    dependsOn: GetReleaseVersion
    timeoutInMinutes: 180
    strategy:
      maxParallel: 2
      matrix:
        x64:
          buildArch: x64
        x86:
          buildArch: x86

    pool:
      vmImage: vs2017-win2016

    variables:
      AppName: $[ dependencies.GetReleaseVersion.outputs['Version.AppName'] ]
      ReleaseVersion: $[ dependencies.GetReleaseVersion.outputs['Version.ReleaseVersion'] ]
      IsReleaseBranch: $[ dependencies.GetReleaseVersion.outputs['Version.IsReleaseBranch'] ]
      IsSignedZipBranch: $[ dependencies.GetReleaseVersion.outputs['Version.IsSignedZipBranch'] ]

    steps:
      - template: templates/preparation.yml

      - template: templates/cache.yml
        parameters:
          OS: windows

      - template: templates/bootstrap.yml

      - script: node script\vsts\windows-run.js script\lint.cmd
        env:
          BUILD_ARCH: $(buildArch)
        displayName: Run linter

      - script: |
          IF NOT EXIST C:\tmp MKDIR C:\tmp
          SET SQUIRREL_TEMP=C:\tmp
          IF [%IS_RELEASE_BRANCH%]==[true] (
            ECHO Creating production artifacts for release branch %BUILD_SOURCEBRANCHNAME%
            IF [%SHOULD_SIGN%]==[true] (
             node script\vsts\windows-run.js script\build.cmd --no-bootstrap --code-sign --compress-artifacts --create-windows-installer
            ) ELSE (
             node script\vsts\windows-run.js script\build.cmd --no-bootstrap --compress-artifacts --create-windows-installer
            )
          ) ELSE (
            IF [%IS_SIGNED_ZIP_BRANCH%]==[true] (
              ECHO Creating signed CI artifacts for branch %BUILD_SOURCEBRANCHNAME%
             IF [%SHOULD_SIGN%]==[true] (
              node script\vsts\windows-run.js script\build.cmd --no-bootstrap --code-sign --compress-artifacts
             ) ELSE (
              node script\vsts\windows-run.js script\build.cmd --no-bootstrap --compress-artifacts
             )
            ) ELSE (
              ECHO Pull request build, no code signing will be performed
              node script\vsts\windows-run.js script\build.cmd --no-bootstrap --compress-artifacts
            )
          )
        env:
          GITHUB_TOKEN: $(GITHUB_TOKEN)
          BUILD_ARCH: $(buildArch)
          ATOM_RELEASE_VERSION: $(ReleaseVersion)
          ATOM_WIN_CODE_SIGNING_CERT_DOWNLOAD_URL: $(ATOM_WIN_CODE_SIGNING_CERT_DOWNLOAD_URL)
          ATOM_WIN_CODE_SIGNING_CERT_PASSWORD: $(ATOM_WIN_CODE_SIGNING_CERT_PASSWORD)
          IS_RELEASE_BRANCH: $(IsReleaseBranch)
          IS_SIGNED_ZIP_BRANCH: $(IsSignedZipBranch)
          npm_config_build_from_source: true
        displayName: Build Atom

      - script: node script\vsts\windows-run.js script\test.cmd
        env:
          CI: true
          CI_PROVIDER: VSTS
          ATOM_JASMINE_REPORTER: list
          TEST_JUNIT_XML_ROOT: $(Common.TestResultsDirectory)\junit
          BUILD_ARCH: $(buildArch)
        displayName: Run tests
        condition: and(succeeded(), ne(variables['Atom.SkipTests'], 'true'))

      - script: >
          node script\vsts\windows-run.js script\postprocess-junit-results.cmd
          --search-folder %TEST_JUNIT_XML_ROOT% --test-results-files "**/*.xml"
        env:
          TEST_JUNIT_XML_ROOT: $(Common.TestResultsDirectory)\junit
        displayName: Post-process test results
        condition: ne(variables['Atom.SkipTests'], 'true')

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: JUnit
          searchFolder: $(Common.TestResultsDirectory)\junit
          testResultsFiles: '**/*.xml'
          mergeTestResults: true
          testRunTitle: Windows $(buildArch)
        condition: ne(variables['Atom.SkipTests'], 'true')

      - script: |
          IF NOT EXIST "%ARTIFACT_STAGING_DIR%\crash-reports" MKDIR "%ARTIFACT_STAGING_DIR%\crash-reports"
          IF EXIST "%Temp%\Atom Crashes" (
            FOR %%a in ("%Temp%\Atom Crashes\*.dmp") DO XCOPY "%%a" "%ARTIFACT_STAGING_DIR%\crash-reports" /I
          )
        displayName: Stage crash reports
        condition: failed()
        env:
          ARTIFACT_STAGING_DIR: $(Build.ArtifactStagingDirectory)

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: $(Build.ArtifactStagingDirectory)/crash-reports
          ArtifactName: crash-reports
        displayName: Publish crash reports on non-release branch
        condition: and(failed(), eq(variables['ATOM_RELEASES_S3_KEY'], ''))

      - script: >
          node $(Build.SourcesDirectory)\script\vsts\upload-crash-reports.js --crash-report-path "%ARTIFACT_STAGING_DIR%\crash-reports" --s3-path "vsts-artifacts/%BUILD_ID%/"
        env:
          ATOM_RELEASES_S3_KEY: $(ATOM_RELEASES_S3_KEY)
          ATOM_RELEASES_S3_SECRET: $(ATOM_RELEASES_S3_SECRET)
          ATOM_RELEASES_S3_BUCKET: $(ATOM_RELEASES_S3_BUCKET)
          ARTIFACT_STAGING_DIR: $(Build.ArtifactStagingDirectory)
          BUILD_ID: $(Build.BuildId)
        displayName: Upload crash reports to S3 on release branch
        condition: and(failed(), ne(variables['ATOM_RELEASES_S3_KEY'], ''))

      - pwsh: |
          if ($env:BUILD_ARCH -eq "x64") {
            $env:FileID="-x64"
            echo "##vso[task.setvariable variable=FileID]$env:FileID" # Azure syntax
          }
        env:
          BUILD_ARCH: $(buildArch)
        displayName: Set FileID based on the arch

      - template: templates/publish.yml
        parameters:
          artifacts:
            - filename: atom$(FileID)-windows.zip
              dir: $(Build.SourcesDirectory)/out
              condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
            - filename: AtomSetup$(FileID).exe
              dir: $(Build.SourcesDirectory)/out
              condition: and(succeeded(), eq(variables['IsReleaseBranch'], 'true'))
            - filename: $(AppName)$(FileID)-$(ReleaseVersion)-full.nupkg
              dir: $(Build.SourcesDirectory)/out
              condition: and(succeeded(), eq(variables['IsReleaseBranch'], 'true'))
            - filename: $(AppName)$(FileID)-$(ReleaseVersion)-delta.nupkg
              dir: $(Build.SourcesDirectory)/out
              condition: and(succeeded(), eq(variables['IsReleaseBranch'], 'true'))
              continueOnError: true # Nightly builds don't produce delta packages yet, so don't fail the build
            - filename: RELEASES$(FileID)
              dir: $(Build.SourcesDirectory)/out
              condition: and(succeeded(), eq(variables['IsReleaseBranch'], 'true'))
